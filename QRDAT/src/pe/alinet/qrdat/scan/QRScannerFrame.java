/*
 * Copyright (C) 2017 Aliosh Neira Ramirez <aliosh2006 at gmail.com>
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package pe.alinet.qrdat.scan;

import com.github.sarxos.webcam.Webcam;
import com.github.sarxos.webcam.WebcamPanel;
import com.github.sarxos.webcam.WebcamResolution;
import java.awt.BorderLayout;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.image.BufferedImage;
import java.util.Date;
import java.util.concurrent.Executor;
import java.util.concurrent.Executors;
import java.util.concurrent.ThreadFactory;
import javax.swing.ImageIcon;
import static javax.swing.SwingUtilities.updateComponentTreeUI;

import javax.swing.Timer;
import javax.swing.UIManager;
import org.slf4j.LoggerFactory;
import pe.alinet.qrdat.pref.PreferencesDialog;

/**
 *
 * @author Aliosh Neira Ramirez <aliosh2006 at gmail.com>
 */
public class QRScannerFrame extends javax.swing.JFrame implements ActionListener,
        Runnable, ThreadFactory{

    /**
     * Creates new form MainFrame
     */
    
    QRScanner qrscanner = new QRScanner();
    Date datetime;
    Timer t;

    private Executor executor = Executors.newSingleThreadExecutor(this);
    private Webcam webcam = null;
    private WebcamPanel webcampanel = null;
    static org.slf4j.Logger logger =  LoggerFactory.getLogger(QRScannerFrame.class);


    public QRScannerFrame() {
        initComponents();
        
        //setLookAndFeel();
        this.timeLog.setModel(qrscanner.model);
        this.t = new Timer(1000, this);
        this.t.start();
        
        Dimension size = WebcamResolution.VGA.getSize();
        webcam = Webcam.getWebcams().get(0);
        webcam.setViewSize(size);

        webcampanel = new WebcamPanel(webcam);
        webcampanel.setMirrored(true);
        //webcampanel.setMinimumSize(new Dimension(this.getSize().width/2,this.getSize().height/2));
        
        add(webcampanel,BorderLayout.CENTER);
        executor.execute(this);
        
        ImageIcon img = new ImageIcon("qr.gif");
        setIconImage(img.getImage());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        firstPanel = new javax.swing.JPanel();
        pDate = new javax.swing.JPanel();
        lbDate = new javax.swing.JLabel();
        ptime = new javax.swing.JPanel();
        lbTime = new javax.swing.JLabel();
        idPanel = new javax.swing.JPanel();
        lbID = new javax.swing.JLabel();
        txtID = new javax.swing.JTextField();
        centerPanel = new javax.swing.JPanel();
        southPanel = new javax.swing.JPanel();
        outPanel = new javax.swing.JPanel();
        lbOut = new javax.swing.JLabel();
        bottomPanel = new javax.swing.JScrollPane();
        timeLog = new javax.swing.JList<>();
        jMenuBar1 = new javax.swing.JMenuBar();
        mFile = new javax.swing.JMenu();
        mImportUsers = new javax.swing.JMenuItem();
        mEdit = new javax.swing.JMenu();
        mPreferences = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("QRDAT");
        setPreferredSize(new java.awt.Dimension(800, 600));

        firstPanel.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 20, 5));

        pDate.setMaximumSize(new java.awt.Dimension(32767, 30));

        lbDate.setFont(lbDate.getFont().deriveFont(lbDate.getFont().getSize()+7f));
        lbDate.setText("fecha");
        pDate.add(lbDate);

        firstPanel.add(pDate);

        ptime.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        lbTime.setFont(lbTime.getFont().deriveFont(lbTime.getFont().getSize()+25f));
        lbTime.setText("hora");
        ptime.add(lbTime);

        firstPanel.add(ptime);

        idPanel.setMaximumSize(new java.awt.Dimension(2147483647, 30));
        idPanel.setLayout(new javax.swing.BoxLayout(idPanel, javax.swing.BoxLayout.LINE_AXIS));

        lbID.setFont(lbID.getFont());
        lbID.setText("N° Identificación: ");
        idPanel.add(lbID);

        txtID.setFont(txtID.getFont().deriveFont(txtID.getFont().getSize()+7f));
        txtID.setMaximumSize(new java.awt.Dimension(2147483647, 30));
        txtID.setMinimumSize(new java.awt.Dimension(100, 28));
        txtID.setPreferredSize(new java.awt.Dimension(120, 28));
        txtID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtIDActionPerformed(evt);
            }
        });
        idPanel.add(txtID);

        firstPanel.add(idPanel);

        getContentPane().add(firstPanel, java.awt.BorderLayout.PAGE_START);
        getContentPane().add(centerPanel, java.awt.BorderLayout.CENTER);

        southPanel.setLayout(new javax.swing.BoxLayout(southPanel, javax.swing.BoxLayout.Y_AXIS));

        lbOut.setFont(lbOut.getFont().deriveFont(lbOut.getFont().getStyle() | java.awt.Font.BOLD, lbOut.getFont().getSize()+7));
        lbOut.setText("-");
        outPanel.add(lbOut);

        southPanel.add(outPanel);

        bottomPanel.setPreferredSize(new java.awt.Dimension(57, 90));
        bottomPanel.setRequestFocusEnabled(false);

        timeLog.setFont(timeLog.getFont());
        timeLog.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        bottomPanel.setViewportView(timeLog);

        southPanel.add(bottomPanel);

        getContentPane().add(southPanel, java.awt.BorderLayout.SOUTH);

        mFile.setText("Archivo");

        mImportUsers.setText("Importar Usuarios");
        mImportUsers.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mImportUsersActionPerformed(evt);
            }
        });
        mFile.add(mImportUsers);

        jMenuBar1.add(mFile);

        mEdit.setText("Editar");

        mPreferences.setText("Preferencias");
        mPreferences.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mPreferencesActionPerformed(evt);
            }
        });
        mEdit.add(mPreferences);

        jMenuBar1.add(mEdit);

        setJMenuBar(jMenuBar1);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtIDActionPerformed
        if (qrscanner.readID(this.txtID.getText())){
            qrscanner.beep();
            
            BufferedImage image = null;
            if (webcam.isOpen()) {

                if ((image = webcam.getImage()) != null) {
                        qrscanner.saveImage(image, this.txtID.getText());
                }
            }
        };
        this.txtID.setText("");
        this.lbOut.setText((String) this.qrscanner.model.get(0));
        
        
            

    }//GEN-LAST:event_txtIDActionPerformed

    private void mPreferencesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mPreferencesActionPerformed
        // TODO add your handling code here:
        PreferencesDialog prefd = new PreferencesDialog(this,true);
        prefd.setVisible(true);

    }//GEN-LAST:event_mPreferencesActionPerformed

    private void mImportUsersActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mImportUsersActionPerformed
        qrscanner.importDialog(this);
    }//GEN-LAST:event_mImportUsersActionPerformed

    @Override
    public void actionPerformed(ActionEvent ae) {
        datetime = new Date();
        qrscanner.setTime(datetime);
        
        this.lbTime.setText(qrscanner.getTime("hh:mm:ss a"));
        this.lbDate.setText(qrscanner.getTime("EEEE, dd MMMM yyyy"));
    }
    
    @Override
    public void run() {

        do {
            try {
                    Thread.sleep(100);
            } catch (InterruptedException e) {
                    e.printStackTrace();
            }

            BufferedImage image = null;
            
            if (webcam.isOpen()) {

                if ((image = webcam.getImage()) == null) {
                        continue;
                }
                
                String text = qrscanner.processImage(image);
                if (text != null){

                    this.lbOut.setText(qrscanner.getText());

                    try {
                        Thread.sleep(1000);
                    } catch (InterruptedException e) {
                        e.printStackTrace();
                    }
                }
            }

        } while (true);
    }
    
    @Override
    public Thread newThread(Runnable r) {
            Thread t = new Thread(r, "qrdat-scanner");
            t.setDaemon(true);
            return t;
    }
    
    public void setLookAndFeel(){
        try{
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
            updateComponentTreeUI(this);
        }catch(Exception exc){
            System.err.println("Couln't use the system "+
                    "look and feel:" + exc);
        }
        
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
//            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
//                if ("Nimbus".equals(info.getName())) {
//                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
//                    break;
//                }
//            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(QRScannerFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(QRScannerFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(QRScannerFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(QRScannerFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new QRScannerFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane bottomPanel;
    private javax.swing.JPanel centerPanel;
    private javax.swing.JPanel firstPanel;
    private javax.swing.JPanel idPanel;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JLabel lbDate;
    private javax.swing.JLabel lbID;
    private javax.swing.JLabel lbOut;
    private javax.swing.JLabel lbTime;
    private javax.swing.JMenu mEdit;
    private javax.swing.JMenu mFile;
    private javax.swing.JMenuItem mImportUsers;
    private javax.swing.JMenuItem mPreferences;
    private javax.swing.JPanel outPanel;
    private javax.swing.JPanel pDate;
    private javax.swing.JPanel ptime;
    private javax.swing.JPanel southPanel;
    private javax.swing.JList<String> timeLog;
    private javax.swing.JTextField txtID;
    // End of variables declaration//GEN-END:variables
}
